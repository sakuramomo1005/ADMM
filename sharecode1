
# setwd('/Users/yaolanqiu/Desktop/NYU/rotation/ADMM New/addsimulation/settings/sim_more_scenario_c')
timestemp = 0
library(fossil)
library(cvxbiclustr)
library(doParallel)
library(foreach)
library(mclust)
library(Matrix)
library(MASS)

source('ADMM20190818.R')
source('cluster assignment.R')
source('prediction_validation_biclustering.R')
source('bicluster.label.R')

#####################################
# parameters

nu1 = nu2 = nu3 = 1
# made 2-dim tuning parameter list

# gamma_1_2.list = expand.grid(gammaSeq,gammaSeq)
# using same gamma1 and gamma2 for fair comparison with Eric's method
# Eric's method 
phi <- 0.5; k <- 5
tol = 1e-5

# generate datasets
data_gen=function(seed.cluster = 123, seed.data=654, n, p, theta=2, row_group = 4, col_group = 4){
  # seed.cluster is used to control the cluster assignment
  # seed.data is used to control the data generation given clustering structure
  mu = seq(-10,10,1)
  x = matrix(0, n, p)
  
  # theta = 4
  
  # mu_rc = matrix(0, row_group,col_group)
  set.seed(seed.cluster)
  mu_rc = sample(mu,size=row_group*col_group, replace = T)
  dim(mu_rc) = c(row_group,col_group )
  # for(r in 1:row_group){
  #   for(c in 1:col_group){
  #     mu_rc[r,c] = sample(mu)[1]
  #   }
  # }
  
  row_assign = c()
  col_assign = c()
  for(i in 1:n){
    row_assign = c(row_assign, sample(1:row_group)[1])
  }
  for(i in 1:p){
    col_assign = c(col_assign, sample(1:col_group)[1])
  }
  ################
  set.seed(seed.data)
  for(i in 1:n){
    for(j in 1:p){
      r = row_assign[i]
      c = col_assign[j]
      mu_temp = mu_rc[r,c]
      x[i,j] = rnorm(1,mu_temp,theta)
    }
  }
  
  rownames(x) = paste('row',row_assign,sep='')
  colnames(x) = paste('col',col_assign,sep='')
  
  return(x)
}

# generate datasets with compositional constraint
data_gen_compositional=function(seed.cluster = 123, seed.data=654, n, p, theta=2, row_group = 4, col_group = 4){
  # seed.cluster is used to control the cluster assignment
  # seed.data is used to control the data generation given clustering structure
  mu = seq(0,100,1)
  x = matrix(0, n, p)
  
  # theta = 4
  
  # mu_rc = matrix(0, row_group,col_group)
  set.seed(seed.cluster)
  mu_rc = sample(mu,size=row_group*col_group, replace = F)
  dim(mu_rc) = c(row_group,col_group )
  # for(r in 1:row_group){
  #   for(c in 1:col_group){
  #     mu_rc[r,c] = sample(mu)[1]
  #   }
  # }
  
  row_assign = c()
  col_assign = c()
  for(i in 1:n){
    row_assign = c(row_assign, sample(1:row_group)[1])
  }
  for(i in 1:p){
    col_assign = c(col_assign, sample(1:col_group)[1])
  }
  ################
  set.seed(seed.data)
  for(i in 1:n){
    for(j in 1:p){
      r = row_assign[i]
      c = col_assign[j]
      mu_temp = mu_rc[r,c]
      x[i,j] = rnorm(1,mu_temp,theta)
    }
  }
  
  x= abs(x)
  x = t(apply(x,1,function(data) {return(data/sum(data))}))
  
  rownames(x) = paste('row',row_assign,sep='')
  colnames(x) = paste('col',col_assign,sep='')
  
  return(x)
}



## Initialize path parameters and structures
nGamma <- 20
gammaSeq <- 10**seq(1,3,length.out=nGamma) #6
# repetition
rep.num = 100
# theta = 2 #8

biclustering.result.list = list()

# eric.rand.list = list()
eric.adj.rand.list = list()
# eric.validate.rand.list = list()
eric.validate.adj.rand.list = list()

# admm.rand.list = list()
admm.adj.rand.list = list()
# admm.validate.rand.list = list()
admm.validate.adj.rand.list = list()

times <- numeric()
val.rand.list = list()

# times <- numeric()
# val.rand.list = list()

for (ii in 1:rep.num ){
  print(ii)
  # count time
  t0 <- Sys.time()
  

  # generate a validation data given the same clustering stucture
  # val.X <- data_gen(seed.cluster=ii* 2365,seed.data=ii* 1257,n , p , theta,row_group = 4, col_group = 4) 

  X <- data_gen(seed.cluster=ii* 112365,seed.data=ii* 112365,n , p , theta,row_group = 4, col_group = 4) 
  X <- X - mean(X)
  X <- X/norm(X,'f')
  
  # generate a validation data given the same clustering stucture
  val.X <- data_gen(seed.cluster=ii* 112365,seed.data=ii* 111257,n , p , theta,row_group = 4, col_group = 4) 
  val.X <- val.X - mean(val.X)
  val.X <- val.X/norm(val.X,'f')
  
  
  # create cluster labels by row and columns
  X.groups = bicluster.label(X)
  val.X.groups = bicluster.label(val.X)
  
  ###############################
  # Eric's method
  # calculate rand
  eric.rand = numeric()
  eric.adj.rand = numeric()
  eric.validate.rand = numeric()
  eric.validate.adj.rand = numeric()
  groups_row = list()
  groups_col = list()
  wts <- gkn_weights(X,phi=phi,k_row=k,k_col=k)
  w_row <- wts$w_row
  w_col <- wts$w_col
  E_row <- wts$E_row
  E_col <- wts$E_col
  sol1 <- cobra(X,E_row,E_col,w_row,w_col,gammaSeq)
  # eric.result.list[[ii]] = sol1
  
  for (ig in 1:nGamma){
    clusters_row <- find_clusters(create_adjacency(sol1$V_row[[ig]],E_row))
    clusters_col <- find_clusters(create_adjacency(sol1$V_col[[ig]],E_col))
    groups_row[[ig]] <- clusters_row
    groups_col[[ig]] <- clusters_col
    
    eric.dat = X
    rownames(eric.dat) = groups_row[[ig]]$cluster
    colnames(eric.dat) = groups_col[[ig]]$cluster
    
    eric.X.groups = bicluster.label(eric.dat)
    
    # eric.rand[ig] = rand.index(eric.X.groups$num, X.groups$num)
    eric.adj.rand[ig] = adjustedRandIndex(eric.X.groups$num, X.groups$num)
    eric.validate = predict_bi_validate(eric.dat,clusters_row$cluster,clusters_col$cluster, val.X, val.X.groups$num)
    # eric.validate.rand[ig] = eric.validate$rand
    eric.validate.adj.rand[ig] = eric.validate$adj.rand
  }
  
  # eric.rand.list[[ii]] = eric.rand
  eric.adj.rand.list[[ii]]=eric.adj.rand
  # eric.validate.rand.list[[ii]]=eric.validate.rand
  eric.validate.adj.rand.list[[ii]]=eric.validate.adj.rand
  
  timestemp <- Sys.time() - t0
  
  main.result = list(times=timestemp, nGamma = nGamma, 
                     # eric.rand.list=eric.rand.list,
                     eric.adj.rand.list=eric.adj.rand.list,
                     # eric.validate.rand.list=eric.validate.rand.list,
                     eric.validate.adj.rand.list=eric.validate.adj.rand.list,
                     # admm.rand.list=admm.rand.list,
                     admm.adj.rand.list=admm.adj.rand.list,
                     # admm.validate.rand.list=admm.validate.rand.list,
                     admm.validate.adj.rand.list=admm.validate.adj.rand.list)
  
  names = paste('temp_mainresult_sim_20200204',
                '_n_', n, '_p_', p,
                '_row_group_', row_group,
                '_col_group_', col_group, '_theta_', theta, '.RData', sep='')
  save(main.result, file = names)
  
  ################# bi-ADMM
  packages <- c("fossil","cvxbiclustr","cvxclustr","mclust")
  
  ###############################
  # ADMM method
  # admm.rand = c()
  admm.adj.rand = c()
  admm.validate = c()
  # admm.validate.rand = c()
  admm.validate.adj.rand = c()
  
  # biclustering.result.list[[ii]] <- foreach(para.index = 1:nGamma, .packages = packages) %dopar% { 
  for(para.index in 1:nGamma){
    
    print(para.index)
    
    gamma_1 = gamma_2 = gammaSeq[para.index]
    
    res_admm = bi_ADMM_order(X, nu1, nu2, gamma_1, gamma_2, kk=k, 
                             phi=phi,niter = 1000,tol = tol,output = 0)
    
    # calculate the rand.index
    MM = cluster_assign(X, 5, res_admm,phi = phi)
    
    admm_group_row = MM$clusters_row
    admm_group_col = MM$clusters_col
    # get the cluster lable for admm
    admm.dat = X
    rownames(admm.dat) = admm_group_row$cluster
    colnames(admm.dat) = admm_group_col$cluster
    
    admm.X.groups = bicluster.label(admm.dat)
    
    # calculate the rand.index
    
    # admm.rand = c(admm.rand, rand.index(admm.X.groups$num, X.groups$num))
    admm.adj.rand = c(admm.adj.rand, adjustedRandIndex(admm.X.groups$num, X.groups$num))
    admm.validate = predict_bi_validate(admm.dat,admm_group_row$cluster,
                                          admm_group_col$cluster, val.X, val.X.groups$num)
    # admm.validate.rand = c(admm.validate.rand, admm.validate$rand)
    admm.validate.adj.rand = c(admm.validate.adj.rand, admm.validate$adj.rand)
    
    timestemp <- Sys.time() - t0
    
    # admm.rand.list[[ii]] = admm.rand
    admm.adj.rand.list[[ii]] = admm.adj.rand
    # admm.validate.rand.list[[ii]]= admm.validate.rand
    admm.validate.adj.rand.list[[ii]] = admm.validate.adj.rand
    
    main.result = list(times=timestemp, nGamma = nGamma, 
                       # eric.rand.list=eric.rand.list,
                       eric.adj.rand.list=eric.adj.rand.list,
                       # eric.validate.rand.list=eric.validate.rand.list,
                       eric.validate.adj.rand.list=eric.validate.adj.rand.list,
                       # admm.rand.list=admm.rand.list,
                       admm.adj.rand.list=admm.adj.rand.list,
                       # admm.validate.rand.list=admm.validate.rand.list,
                       admm.validate.adj.rand.list=admm.validate.adj.rand.list)
    
    names = paste('temp_mainresult_sim_20200204',
                  '_n_', n, '_p_', p,
                  '_row_group_', row_group,
                  '_col_group_', col_group, '_theta_', theta, '.RData', sep='')
    save(main.result, file = names)
    
    
  }
  
  # admm.rand.list[[ii]] = admm.rand
  admm.adj.rand.list[[ii]] = admm.adj.rand
  # admm.validate.rand.list[[ii]]= admm.validate.rand
  admm.validate.adj.rand.list[[ii]] = admm.validate.adj.rand
  
  
  # biclustering.result.list[[ii]] <-
  #   # foreach(para.index = 1:nrow(gamma_1_2.list), .packages = packages) %dopar% { # diferent gamma1 and gamma2
  #   foreach(para.index = 1:2, .packages = packages) %dopar% {
  #     # using different gamma1 and gamma2
  #     # gamma_1 = gamma_1_2.list[para.index,1]
  #     # gamma_2 = gamma_1_2.list[para.index,2]
  #     # using the same gamma1 and gamma2
  #     print(para.index)
  #     gamma_1 = gamma_2 = gammaSeq[para.index]
  #     
  #     # res_admm = bi_ADMM_order(X, nu1, nu2, gamma_1, gamma_2, kk=k, 
  #     #                          phi=phi,niter = 5000,tol = tol,output = 0)
  #     
  #     res_admm = bi_ADMM_compositional(X, nu1, nu2, nu3, 
  #                                      gamma_1, gamma_2, kk=5, 
  #                                      phi=0.5,niter = 1, tol = 1e-5,
  #                                      output = 0,weight.scale=0)
  #     
  #     # calculate the rand.index
  #     MM = cluster_assign(X, 5, res_admm,phi = phi)
  #     
  #     admm_group_row = MM$clusters_row
  #     admm_group_col = MM$clusters_col
  #     # get the cluster lable for admm
  #     admm.dat = X
  #     rownames(admm.dat) = admm_group_row$cluster
  #     colnames(admm.dat) = admm_group_col$cluster
  #     
  #     admm.X.groups = bicluster.label(admm.dat)
  #     
  #     admm.rand = rand.index(admm.X.groups$num, X.groups$num)
  #     admm.adj.rand = adjustedRandIndex(admm.X.groups$num, X.groups$num)
  #     admm.validate = predict_bi_validate(admm.dat,admm_group_row$cluster,admm_group_col$cluster, val.X, val.X.groups$num)
  #     admm.validate.rand = admm.validate$rand
  #     admm.validate.adj.rand = admm.validate$adj.rand
  #     
  #     return(list(clustering=MM,rand=admm.rand,adj.rand=admm.adj.rand, 
  #                 validate.rand=admm.validate.rand,validate.adj.rand =admm.validate.adj.rand))
  #     
  #   }  
  # admm.rand.list[[ii]] = unlist( lapply(biclustering.result.list[[ii]], function(data) {return(data$rand)}) )
  # admm.adj.rand.list[[ii]] = unlist( lapply(biclustering.result.list[[ii]], function(data) {return(data$adj.rand)}) )
  # admm.validate.rand.list[[ii]] = unlist( lapply(biclustering.result.list[[ii]], function(data) {return(data$validate.rand)}) )
  # admm.validate.adj.rand.list[[ii]] = unlist( lapply(biclustering.result.list[[ii]], function(data) {return(data$validate.adj.rand)}) )
  # 
  times[ii] <- Sys.time() - t0
  print(times[ii] )
  
  main.result = list(times=times,nGamma = nGamma, 
                     # eric.rand.list=eric.rand.list,
                     eric.adj.rand.list=eric.adj.rand.list,
                     # eric.validate.rand.list=eric.validate.rand.list,
                     eric.validate.adj.rand.list=eric.validate.adj.rand.list,
                     # admm.rand.list=admm.rand.list,
                     admm.adj.rand.list=admm.adj.rand.list,
                     # admm.validate.rand.list=admm.validate.rand.list,
                     admm.validate.adj.rand.list=admm.validate.adj.rand.list)
  
  names = paste('mainresult_sim_20200204',
                '_n_', n, '_p_', p,
                '_row_group_', row_group,
                '_col_group_', col_group, '_theta_', theta, '.RData', sep='')
  save(main.result, file = names)
}

main.result = list(times=times,nGamma = nGamma, 
                   # eric.rand.list=eric.rand.list,
                   eric.adj.rand.list=eric.adj.rand.list,
                   # eric.validate.rand.list=eric.validate.rand.list,
                   eric.validate.adj.rand.list=eric.validate.adj.rand.list,
                   # admm.rand.list=admm.rand.list,
                   admm.adj.rand.list=admm.adj.rand.list,
                   # admm.validate.rand.list=admm.validate.rand.list,
                   admm.validate.adj.rand.list=admm.validate.adj.rand.list)

names = paste('mainresult_sim_20200204',
              '_n_', n, '_p_', p, 
              '_row_group_', row_group, 
              '_col_group_', col_group, '_theta_', theta, '.RData', sep='')
save(main.result, file = names)
